{"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-alu0101215310/src/ejercicio-pe.ts":{"path":"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-alu0101215310/src/ejercicio-pe.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}},"2":{"start":{"line":13,"column":8},"end":{"line":13,"column":23}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":65}},"5":{"start":{"line":20,"column":45},"end":{"line":20,"column":63}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":32}},"7":{"start":{"line":35,"column":8},"end":{"line":35,"column":25}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":23}},"9":{"start":{"line":39,"column":24},"end":{"line":39,"column":44}},"10":{"start":{"line":40,"column":23},"end":{"line":40,"column":41}},"11":{"start":{"line":41,"column":8},"end":{"line":41,"column":44}},"12":{"start":{"line":44,"column":24},"end":{"line":44,"column":44}},"13":{"start":{"line":45,"column":23},"end":{"line":45,"column":41}},"14":{"start":{"line":46,"column":8},"end":{"line":46,"column":44}},"15":{"start":{"line":49,"column":24},"end":{"line":49,"column":65}},"16":{"start":{"line":50,"column":23},"end":{"line":50,"column":64}},"17":{"start":{"line":51,"column":8},"end":{"line":51,"column":44}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":20}},"19":{"start":{"line":57,"column":0},"end":{"line":57,"column":26}},"20":{"start":{"line":58,"column":13},"end":{"line":58,"column":30}},"21":{"start":{"line":59,"column":13},"end":{"line":59,"column":30}},"22":{"start":{"line":60,"column":19},"end":{"line":60,"column":49}},"23":{"start":{"line":61,"column":0},"end":{"line":61,"column":35}},"24":{"start":{"line":62,"column":0},"end":{"line":62,"column":35}},"25":{"start":{"line":63,"column":0},"end":{"line":63,"column":28}},"26":{"start":{"line":64,"column":0},"end":{"line":64,"column":28}},"27":{"start":{"line":65,"column":0},"end":{"line":65,"column":34}},"28":{"start":{"line":66,"column":0},"end":{"line":66,"column":34}},"29":{"start":{"line":67,"column":0},"end":{"line":67,"column":33}},"30":{"start":{"line":68,"column":0},"end":{"line":68,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":18},"end":{"line":14,"column":5}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":28},"end":{"line":18,"column":5}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":30},"end":{"line":21,"column":5}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":32},"end":{"line":20,"column":33}},"loc":{"start":{"line":20,"column":45},"end":{"line":20,"column":63}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":33},"end":{"line":24,"column":5}},"line":22},"5":{"name":"(anonymous_5)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":27},"end":{"line":37,"column":5}},"line":34},"6":{"name":"(anonymous_6)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":13},"end":{"line":42,"column":5}},"line":38},"7":{"name":"(anonymous_7)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":19},"end":{"line":47,"column":5}},"line":43},"8":{"name":"(anonymous_8)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":18},"end":{"line":52,"column":5}},"line":48},"9":{"name":"(anonymous_9)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":16},"end":{"line":55,"column":5}},"line":53}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":2,"4":0,"5":0,"6":0,"7":16,"8":16,"9":3,"10":3,"11":3,"12":3,"13":3,"14":3,"15":3,"16":3,"17":3,"18":0,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1},"f":{"0":1,"1":2,"2":0,"3":0,"4":0,"5":16,"6":3,"7":3,"8":3,"9":0},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-alu0101215310/src/ejercicio-pe.ts","sources":["/home/usuario/ull-esit-inf-dsi-21-22-prct06-generics-solid-alu0101215310/src/ejercicio-pe.ts"],"names":[],"mappings":";;;AAcA;;;;;;GAMG;AACH,MAAM,wBAAwB;IAE5B;QADQ,SAAI,GAAS,EAAE,CAAC;IACT,CAAC;IAAA,CAAC;IAEjB,iBAAiB,CAAC,IAAQ;QACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IACD,iBAAiB,CAAC,MAAU;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC;IAC3D,CAAC;IACD,0BAA0B;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAC1B,CAAC;CACF;AAED;;;;;;GAMG;AACH,MAAa,OAAO;IAClB,YAAoB,IAAa,EAAU,GAAY;QAAnC,SAAI,GAAJ,IAAI,CAAS;QAAU,QAAG,GAAH,GAAG,CAAS;IAAG,CAAC;IAE3D,GAAG,CAAC,GAAa;QACf,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QAClC,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IACD,SAAS,CAAC,GAAY;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QAClC,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IACD,QAAQ,CAAC,GAAY;QACnB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QAC1D,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;QACzD,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IACD,MAAM,CAAC,GAAY;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AArBD,0BAqBC;AAED,MAAM,IAAI,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B,MAAM,IAAI,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/B,MAAM,UAAU,GAAG,IAAI,wBAAwB,EAAE,CAAC;AAClD,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AACnC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AACnC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AACjC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @interface Arithmeticable : interfaz genérica para operaciones aritméticas\n * @method add : suma de dos tipos de datos\n * @method substract : resta de dos tipos de datos\n * @method multiply : multiplica dos tipos de datos\n * @method divide : divide dos tipos de datos\n */\ninterface Arithmeticable<T>{\n  add(first : T) : T;\n  substract(first : T) : T;\n  multiply(first : T) : T;\n  divide(first : T) : T;\n}\n\n/**\n * @class ArithmeticableCollection : Representa una colección de datos génerico\n * que permita la interfaz Arithmeticable\n * @method addArithmeticable : añade un objeto a la colección\n * @method getArithmeticable : devuelve el objeto buscado\n * @method getNumberOfArithmeticables : devuelve el tamaño de la colección\n */\nclass ArithmeticableCollection<T extends Arithmeticable<T>> {\n  private list : T[] = [];\n  constructor() {};\n\n  addArithmeticable(item : T) {\n    this.list.push(item);\n  }\n  getArithmeticable(search : T) {\n    return this.list.filter((element) => element === search);\n  }\n  getNumberOfArithmeticables() {\n    return this.list.length;\n  }\n}\n\n/**\n * @class Complex : Representa un número complejo\n * @method add : suma dos números complejos\n * @method subImg : resta dos números complejos\n * @method multiply : multiplica dos números complejos\n * @method divide : divide dos números complejos\n */\nexport class Complex implements Arithmeticable<Complex> {\n  constructor(private real : number, private img : number) {}\n\n  add(num : Complex) : Complex {\n    const addReal = this.real + num.real;\n    const addImg = this.img + num.img;\n    return new Complex(addReal, addImg);\n  }\n  substract(num: Complex) : Complex {\n    const subReal = this.real - num.real;\n    const subImg = this.img - num.img;\n    return new Complex(subReal, subImg);\n  }\n  multiply(num: Complex): Complex {\n    const mulReal = this.real * num.real + this.img + num.img;\n    const mulImg = this.real * num.img + this.img * num.real;\n    return new Complex(mulReal, mulImg);\n  }\n  divide(num: Complex): Complex {\n    return this;\n  }\n}\n\nconst com1 = new Complex(1, 3);\nconst com2 = new Complex(2, 4);\nconst collection = new ArithmeticableCollection();\ncollection.addArithmeticable(com1);\ncollection.addArithmeticable(com2);\nconsole.log(com1.add(com2));\nconsole.log(com2.add(com1));\nconsole.log(com1.substract(com2));\nconsole.log(com2.substract(com1));\nconsole.log(com1.multiply(com2));\nconsole.log(com2.multiply(com1));\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d87d472f7244d230d160f0457a83b188a664f79f","contentHash":"42f21605b2ad62ee1f3ecc934249b4c520162775e3b6f62b971585d8f00b6842"}}